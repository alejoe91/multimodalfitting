19th May 2021
Darshan

The file was created to improve the hay_ais model with Mickael's suggestions/code
and also test channel ratio bassed on hallermann model.


soma: ik, ina, ica, i_pas, ihcn_Ih



Mickael:

class NrnSegmentSomaDistanceScaler(ParameterScaler, DictMixin):

    """Scaler based on distance from soma"""
    SERIALIZED_FIELDS = ('name', 'comment', 'distribution', 'soma_ref_point', )

    def __init__(
            self,
            name=None,
            distribution=None,
            comment='',
            dist_param_names=None,
            soma_ref_point=0.5):
        """Constructor

        Args:
            name (str): name of this object
            distribution (str): distribution of parameter dependent on distance
                from soma. string can contain `distance` and/or `value` as
                placeholders for the distance to the soma and parameter value
                respectivily
            dist_params (list): list of names of parameters that parametrise
                the distribution. These names will become attributes of this
                object.
                The distribution string should contain these names, and they
                will be replaced by values of the corresponding attributes
        """

        super(NrnSegmentSomaDistanceScaler, self).__init__(name, comment)
        self.distribution = distribution

        self.dist_param_names = dist_param_names
        self.soma_ref_point = soma_ref_point

        if self.dist_param_names is not None:
            for dist_param_name in self.dist_param_names:
                if dist_param_name not in self.distribution:
                    raise ValueError(
                        'NrnSegmentSomaDistanceScaler: "{%s}" '
                        'missing from distribution string "%s"' %
                        (dist_param_name, distribution))
                setattr(self, dist_param_name, None)

    @property
    def inst_distribution(self):
        """The instantiated distribution"""

        dist_dict = MissingFormatDict()

        if self.dist_param_names is not None:
            for dist_param_name in self.dist_param_names:
                dist_param_value = getattr(self, dist_param_name)
                if dist_param_value is None:
                    raise ValueError('NrnSegmentSomaDistanceScaler: %s '
                                     'was uninitialised' % dist_param_name)
                dist_dict[dist_param_name] = dist_param_value

        # Use this special formatting to bypass missing keys
        return string.Formatter().vformat(self.distribution, (), dist_dict)

    def eval_dist(self, value, distance):
        """Create the final dist string"""

        scale_dict = {}
        scale_dict['distance'] = format_float(distance)
        scale_dict['value'] = format_float(value)

        return self.inst_distribution.format(**scale_dict)


    def scale(self, value, segment, sim=None):
        """Scale a value based on a segment"""

        # TODO soma needs other addressing scheme

        soma = segment.sec.cell().soma[0]

        # Initialise origin
        sim.neuron.h.distance(0, self.soma_ref_point, sec=soma)

        distance = sim.neuron.h.distance(1, segment.x, sec=segment.sec)

        # Find something to generalise this
        import math  # pylint:disable=W0611 #NOQA

        # This eval is unsafe (but is it ever dangerous ?)
        # pylint: disable=W0123
        return eval(self.eval_dist(value, distance))


    def __str__(self):
        """String representation"""

        return self.distribution


############################# Hallermann #########################


na_ais		=	7000			
na_soma		=	500		
ais_na/soma_na = 14  --->equivalent test:  Nap_Et2


Kv_soma	 	=	100	


Kv1_ais		=	2000 		
Kv1_soma	=	100
ais_Kv1/soma_Kv1 = 20   --->equivalent test:  KvTst


Kv7_ais		=	7
Kv7_soma	=	1	
ais_Kv7/soma_Kv7 = 7  --->equivalent test:  KvPst



//CAVE: check for parameter-settings in loaded sessions

na_ais		=	7000			
na_node		=	7000
na_collat	=	500
na_soma		=	500				
na_dend		=	20 						
na_myelin	=	40
max_distance_apic	=	300		// distance where gbar_na has reached na_dend
max_distance_basal	=	100		//corresponding distance for basal dendrites

vShift_na		=	10 // affecting activation and inactivation
vShift_inact_na		=	10 // affects only inactivation
q10_na			=	3
q10h_na			=	3

vShift_nax		=	10
vShift_inact_nax	=	10		
q10_nax			=	3.0
q10h_nax		=	3.0


length_constant_Kv_and_Kv1	=	80	//length constant of the exponential decay in um of Kv and Kv1
						//according to Keren et al., 2009, JPhysiol, 587:1413-37
Kv_soma	 	=	100
Kv_dend	 	=	3	
		

Kv1_dend	=	0.3		
Kv1_ais		=	2000 		
Kv1_soma	=	100
Kv1_collat	=	400

vShift_Kv1		=	10
vShift_inact_Kv1	=	-15

Kv7_soma	=	1	
Kv7_dend	=	1
Kv7_ais		=	7
	
ca_reduce_fac	=	0.1

gca_dend	=	2.0*ca_reduce_fac
gca_soma	=	2.0*ca_reduce_fac 
gca_ais		=	0.0


git2_ais	=	0.0
git2_dend	=	2.0*ca_reduce_fac
git2_apic	=	6.0*ca_reduce_fac
git2_soma	=	2.0*ca_reduce_fac

gkca_soma	=	1.0*ca_reduce_fac 
gkca_dend	=	1.0*ca_reduce_fac
gkca_ais	=	1.0*ca_reduce_fac

gCa_HVA_apic_hot_fac=	1	//i.e. no Ca hot spot	//ca
gCa_LVAst_apic_hot_fac=	1				//it2
gCa_hot_start	=	685
gCa_hot_end	=	885

spinescale	=	1.5
sheaths		=	10	//number of myelin sheaths



